{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AWS IoT Core - Creating Multiple Things using boto3 Introduction The Internet of Things (IoT) offers the potential for data acquisition and digital interaction in areas previously inaccessible at an unprecedented scale. The magnitude of this opportunity affects individuals, organizations, and governments in many different ways. In order to address the complexity of provisioning and managing connected things manufacturers need ways to simplify and automate tasks like provisioning device identities and providing those identities to the devices as they are being manufactured in a secure and repeatable fashion. Enabling this formidable task is a new feature from the AWS IoT Device Management service that enables bulk provisioning of connected things . This new feature allows users to register large number of devices at once. Certificates, things, and policy resources make up the principal and permissions configuration for each thing within AWS IoT Core. Regardless of the specific nature of the application, when developing a solution using AWS IoT Services, you will need to create a \u2018thing\u2019 to store information about each device, create a certificate to provide secure credentials for the \u2018thing\u2019, and set up permissions by attaching the certificate to an appropriate policy for the \u2018thing\u2019. AWS IoT bulk provisioning feature simplifies and automates the registration process. AWS IoT Service provides three options for provisioning multiple devices. Bulk Provisioning Fleet Provisioning Just in time Provisioning(JITP) This documents provides scripts to automate creating multiple things in your account using the AWS SDK for python (boto3).","title":"Home"},{"location":"#aws-iot-core-creating-multiple-things-using-boto3","text":"","title":"AWS IoT Core - Creating Multiple Things using boto3"},{"location":"#introduction","text":"The Internet of Things (IoT) offers the potential for data acquisition and digital interaction in areas previously inaccessible at an unprecedented scale. The magnitude of this opportunity affects individuals, organizations, and governments in many different ways. In order to address the complexity of provisioning and managing connected things manufacturers need ways to simplify and automate tasks like provisioning device identities and providing those identities to the devices as they are being manufactured in a secure and repeatable fashion. Enabling this formidable task is a new feature from the AWS IoT Device Management service that enables bulk provisioning of connected things . This new feature allows users to register large number of devices at once. Certificates, things, and policy resources make up the principal and permissions configuration for each thing within AWS IoT Core. Regardless of the specific nature of the application, when developing a solution using AWS IoT Services, you will need to create a \u2018thing\u2019 to store information about each device, create a certificate to provide secure credentials for the \u2018thing\u2019, and set up permissions by attaching the certificate to an appropriate policy for the \u2018thing\u2019. AWS IoT bulk provisioning feature simplifies and automates the registration process. AWS IoT Service provides three options for provisioning multiple devices. Bulk Provisioning Fleet Provisioning Just in time Provisioning(JITP) This documents provides scripts to automate creating multiple things in your account using the AWS SDK for python (boto3).","title":"Introduction"},{"location":"dev_guide/","text":"aws-iot-core-create-many-things-boto3 Using the console AWS IoT Core Registering bulk devices Certification and Authenticating the devices Bulk Registiration Using AWS IoT bulk provisioning feature, device manufacturers and suppliers can simplify and automate tasks like provisioning device identities in a secure and repeatable fashion as demonstrated by the examples. While the examples here are a start, there is much more that AWS IoT Device Management offers organizations for deploying and managing large fleets of connected things. I hope you found the blog useful and informative, and I encourage you to learn more about the new features of the AWS IoT Core to help your organization make the most of these and other enabling new technologies from AWS. Within the scope of this demo application approximetlay 100 dustbins will be connected to cloud In order to make productive use of the AWS IoT Device Management bulk provisioning feature you\u2019ll need to prepare a few AWS resources prior to starting the provisioning task. Those resources include provisioning template, an S3 bucket location, a service role and a data file. Additionally, you will need to create X.509 certificates and generate certificate signing requests (CSRs). We\u2019ll go over each of those resources in greater detail next. Create Provisioning Template A provisioning template contains variables that are replaced when the template is used to provision a device. A dictionary (map) is used to provide values for the variables used in a template. The bulk provisioning task will use the JSON data file as the replacement variable values when the task is run. Create Certificates and Certificate Signing Requests (CSRs) Write a bash or python script to automatically create .crt and .key files for all objects. Create a python script to convert the key into single line string. openssl req -new -newkey rsa:2048 -nodes -keyout keys/device-one.key -out certificates/device-one.csr -subj \"/C=US/ST=WA/L=Seattle/O=MyOrg/CN=MyDept\" 3) Generate JSON data file and copy to S3 bucket With the provisioning template and CSR files created, we can now build our JSON data file. The data file must be a newline-delimited JSON file. Each line contains all of the parameter values for provisioning a single device. For this example, our data file should appear as follows: {\"ThingName\": \"device-one\", \"SerialNumber\": \"001\", \"CSR\": \"*** CSR FILE CONTENT ***\"} {\"ThingName\": \"device-two\", \"SerialNumber\": \"002\", \"CSR\": \"*** CSR FILE CONTENT ***\"} {\"ThingName\": \"device-three\", \"SerialNumber\": \"003\", \"CSR\": \"*** CSR FILE CONTENT ***\"} 4) Create Service Role When the provisioning task is executed, the IoT service will need to locate the data file in an S3 bucket. You can use an existing bucket or create a new one specifically for use in provisioning a device in the AWS IoT Core service. With either choice, you will need to create a role that allows AWS IoT Core to access the bucket to retrieve the data file. First Create a trust policy to provide permissions to your S3 bucket. Be sure that your bucket name is properly entered. Use the example below as a guide: { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"s3:GetObject\" ], \"Resource\": [ \"arn:aws:s3:::smart-waste-management/*\" ] } ] } Attach the policy to the role. Using the SDK (python) S3 Bucket configuration IoT Core Configuration Installation Boto3 is the Amazon Web Services (AWS) Software Development Kit (SDK) for Python, which allows Python developers to write software that makes use of services like Amazon S3 and Amazon EC2. In order to configure project using python, AWS Python SDK Boto3 is needed to be installed. pip3 install boto3 Configuring the creditentials After installing boto3, next step is to set up credentials. Credentials include items aws_access_key_id, aws_secret_access_key and aws_session_token. Boto3 will look in several locations when searching for credentials. The mechanism in which Boto3 looks for credentials is to search through a list of possible locations and stop as soon as it finds credentials. The order in which Boto3 searches for credentials is: Passing credentials as parameters in the boto.client() method Passing credentials as parameters when creating a Session object Environment variables Shared credential file (~/.aws/credentials) AWS config file (~/.aws/config) Assume Role provider Boto2 config file (/etc/boto.cfg and ~/.boto) Instance metadata service on an Amazon EC2 instance that has an IAM role configured. Shared credential file The shared credentials file has a default location of ~/.aws/credentials. You can change the location of the shared credentials file by setting the AWS_SHARED_CREDENTIALS_FILE environment variable. This file is an INI formatted file with section names corresponding to profiles. With each section, the three configuration variables shown above can be specified: aws_access_key_id, aws_secret_access_key, aws_session_token. These are the only supported values in the shared credential file. Below is a minimal example of the shared credentials file: [default] aws_access_key_id = YOUR_KEY aws_secret_access_key = YOUR_SECRET aws_session_token=baz Then, set up a default region (in e.g. ~/.aws/config): [default] region=us-east-1 IAM Role Configuration In order to grant AWS IoT Core to access S3 service an IAM role needed to be created. The created IAM role must have the following policies; The created IAM role must have following policies; Allows IoT to call AWS services on your behalf. AWSIoTThingsRegistration (AWS managed policy) ( +) AmazonS3ReadOnlyAccess { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"VisualEditor0\", \"Effect\": \"Allow\", \"Action\": \"s3:GetObject\", \"Resource\": \"arn:aws:s3:::iot-use-cases/smart-waste-management*\" } ] } S3 Bucket Configuration fsaf IoT Core Configuration Choose the parameter file from the S3 bucket in which it's stored","title":"Developer Guide(add)"},{"location":"dev_guide/#aws-iot-core-create-many-things-boto3","text":"","title":"aws-iot-core-create-many-things-boto3"},{"location":"dev_guide/#using-the-console","text":"","title":"Using the console"},{"location":"dev_guide/#aws-iot-core","text":"Registering bulk devices Certification and Authenticating the devices","title":"AWS IoT Core"},{"location":"dev_guide/#bulk-registiration","text":"Using AWS IoT bulk provisioning feature, device manufacturers and suppliers can simplify and automate tasks like provisioning device identities in a secure and repeatable fashion as demonstrated by the examples. While the examples here are a start, there is much more that AWS IoT Device Management offers organizations for deploying and managing large fleets of connected things. I hope you found the blog useful and informative, and I encourage you to learn more about the new features of the AWS IoT Core to help your organization make the most of these and other enabling new technologies from AWS. Within the scope of this demo application approximetlay 100 dustbins will be connected to cloud In order to make productive use of the AWS IoT Device Management bulk provisioning feature you\u2019ll need to prepare a few AWS resources prior to starting the provisioning task. Those resources include provisioning template, an S3 bucket location, a service role and a data file. Additionally, you will need to create X.509 certificates and generate certificate signing requests (CSRs). We\u2019ll go over each of those resources in greater detail next.","title":"Bulk Registiration"},{"location":"dev_guide/#create-provisioning-template","text":"A provisioning template contains variables that are replaced when the template is used to provision a device. A dictionary (map) is used to provide values for the variables used in a template. The bulk provisioning task will use the JSON data file as the replacement variable values when the task is run.","title":"Create Provisioning Template"},{"location":"dev_guide/#create-certificates-and-certificate-signing-requests-csrs","text":"Write a bash or python script to automatically create .crt and .key files for all objects. Create a python script to convert the key into single line string. openssl req -new -newkey rsa:2048 -nodes -keyout keys/device-one.key -out certificates/device-one.csr -subj \"/C=US/ST=WA/L=Seattle/O=MyOrg/CN=MyDept\"","title":"Create Certificates and Certificate Signing Requests (CSRs)"},{"location":"dev_guide/#3-generate-json-data-file-and-copy-to-s3-bucket","text":"With the provisioning template and CSR files created, we can now build our JSON data file. The data file must be a newline-delimited JSON file. Each line contains all of the parameter values for provisioning a single device. For this example, our data file should appear as follows: {\"ThingName\": \"device-one\", \"SerialNumber\": \"001\", \"CSR\": \"*** CSR FILE CONTENT ***\"} {\"ThingName\": \"device-two\", \"SerialNumber\": \"002\", \"CSR\": \"*** CSR FILE CONTENT ***\"} {\"ThingName\": \"device-three\", \"SerialNumber\": \"003\", \"CSR\": \"*** CSR FILE CONTENT ***\"}","title":"3) Generate JSON data file and copy to S3 bucket"},{"location":"dev_guide/#4-create-service-role","text":"When the provisioning task is executed, the IoT service will need to locate the data file in an S3 bucket. You can use an existing bucket or create a new one specifically for use in provisioning a device in the AWS IoT Core service. With either choice, you will need to create a role that allows AWS IoT Core to access the bucket to retrieve the data file. First Create a trust policy to provide permissions to your S3 bucket. Be sure that your bucket name is properly entered. Use the example below as a guide: { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"s3:GetObject\" ], \"Resource\": [ \"arn:aws:s3:::smart-waste-management/*\" ] } ] } Attach the policy to the role.","title":"4) Create Service Role"},{"location":"dev_guide/#using-the-sdk-python","text":"S3 Bucket configuration IoT Core Configuration","title":"Using the SDK (python)"},{"location":"dev_guide/#installation","text":"Boto3 is the Amazon Web Services (AWS) Software Development Kit (SDK) for Python, which allows Python developers to write software that makes use of services like Amazon S3 and Amazon EC2. In order to configure project using python, AWS Python SDK Boto3 is needed to be installed. pip3 install boto3","title":"Installation"},{"location":"dev_guide/#configuring-the-creditentials","text":"After installing boto3, next step is to set up credentials. Credentials include items aws_access_key_id, aws_secret_access_key and aws_session_token. Boto3 will look in several locations when searching for credentials. The mechanism in which Boto3 looks for credentials is to search through a list of possible locations and stop as soon as it finds credentials. The order in which Boto3 searches for credentials is: Passing credentials as parameters in the boto.client() method Passing credentials as parameters when creating a Session object Environment variables Shared credential file (~/.aws/credentials) AWS config file (~/.aws/config) Assume Role provider Boto2 config file (/etc/boto.cfg and ~/.boto) Instance metadata service on an Amazon EC2 instance that has an IAM role configured.","title":"Configuring the creditentials"},{"location":"dev_guide/#shared-credential-file","text":"The shared credentials file has a default location of ~/.aws/credentials. You can change the location of the shared credentials file by setting the AWS_SHARED_CREDENTIALS_FILE environment variable. This file is an INI formatted file with section names corresponding to profiles. With each section, the three configuration variables shown above can be specified: aws_access_key_id, aws_secret_access_key, aws_session_token. These are the only supported values in the shared credential file. Below is a minimal example of the shared credentials file: [default] aws_access_key_id = YOUR_KEY aws_secret_access_key = YOUR_SECRET aws_session_token=baz Then, set up a default region (in e.g. ~/.aws/config): [default] region=us-east-1","title":"Shared credential file"},{"location":"dev_guide/#iam-role-configuration","text":"In order to grant AWS IoT Core to access S3 service an IAM role needed to be created. The created IAM role must have the following policies; The created IAM role must have following policies; Allows IoT to call AWS services on your behalf. AWSIoTThingsRegistration (AWS managed policy) ( +) AmazonS3ReadOnlyAccess { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"VisualEditor0\", \"Effect\": \"Allow\", \"Action\": \"s3:GetObject\", \"Resource\": \"arn:aws:s3:::iot-use-cases/smart-waste-management*\" } ] }","title":"IAM Role Configuration"},{"location":"dev_guide/#s3-bucket-configuration","text":"fsaf","title":"S3 Bucket Configuration"},{"location":"dev_guide/#iot-core-configuration","text":"","title":"IoT Core Configuration"},{"location":"dev_guide/#choose-the-parameter-file-from-the-s3-bucket-in-which-its-stored","text":"","title":"Choose the parameter file from the S3 bucket in which it's stored"},{"location":"devops_guide/","text":"Bulk Provisioning Installation AWS IAM Configuration","title":"Developer Guide"},{"location":"devops_guide/#bulk-provisioning","text":"","title":"Bulk Provisioning"},{"location":"devops_guide/#installation","text":"","title":"Installation"},{"location":"devops_guide/#aws-iam-configuration","text":"","title":"AWS IAM Configuration"},{"location":"introduction/","text":"Introduction The sample application for smart waste management system consists of multiple components based on cloud connectivity and visualization dashbaords. Archutecuter of the application can ben seen below.","title":"Introduction"},{"location":"introduction/#introduction","text":"The sample application for smart waste management system consists of multiple components based on cloud connectivity and visualization dashbaords. Archutecuter of the application can ben seen below.","title":"Introduction"},{"location":"ssl_guide/","text":"SSL What is SSL Secure Sockets Layer (SSL) and Transport Layer security (TLS ) are protocols that provide secure communications over a computer network or link .","title":"SSL"},{"location":"ssl_guide/#ssl","text":"","title":"SSL"},{"location":"ssl_guide/#what-is-ssl","text":"Secure Sockets Layer (SSL) and Transport Layer security (TLS ) are protocols that provide secure communications over a computer network or link .","title":"What is SSL"},{"location":"user_guide/","text":"User Guide Installation The complete project can be found in this repository created by Yilmaz Naci Aslan. For installation please navigate to the github repository or simply download as zip. Once the repository is downloaded follow the guidelines below for depending on your operating system Ubuntu cd YOUR_WORKING_DIRECTORY source installation.sh Windows Not tested yet Configuration Once the installation is completed, some configurations are needed be done. All the configuration parameters are defined in the scrpts/config.py script. Configuration steps can be grouped into following sections AWS IAM Role Application Configuration AWS IAM Configuration The very first thing to configure is the user settings for accesing to AWS IoT Core using boto3. If you don't have AWS account please create one before proceeding the next steps. Create an IAM user It is good practice to create an AWS user for your account rather than using the root account. Create a user for your AWS account by enabling both Programmatic access and Console Acces . Save/download the credetion ID and and scret key Add the following policies to the user AWSIoTFullAccess AWSS3FullAccess Save the AWS Access Key Id and Access Key into corrosponding .config file in the operating system. aws_access_key_id = xxxxxxxx aws_secret_access_key = xxxxxxxx For more information about please see the more detailed explanation section. Application Configuration (Optional) Set Region Under the application configuration, REGION of the AWS IoT Core Service being used is defined. Default value for te region is REGION = \"us-east-1\" . If you want to run your applicatio in another region then simply change the Region constant in config.py to another location. REGION = \"us-east-1\" Set Certification option When creating multiple things for to beu the recommand e each thing has a unique certification. This is important for cyber security aspect. However for experimenting purposes one can also use the same certification for multiple things. This behahoiver is determined with the set_unique flag in config.py . By keeping this flag true, a unique certificate will be generated for each thing. Defining this flag to False will generate only one certification in aws iot core, and this certificate will be used for authenticating the created things. Default value of the flag is defined as True. set_unique = True Set a name for the thing type Run Once the installation and AWS IAM Configuration is completed, you can execute the main.py script. By using the default parameters in Application Configuration , the program will executes as below; Creates a S3 Bucket to be used to store provisioning data file. Creates 10 things, 10 certificates and a policy to test the mqtt connection. Stores the created certificates and keys under secure/keys and secure/certificate directories of the project folder. Attaches created each certificate with a thing and a policy. Results Once the execution of the main.py finishes, following resources can be found on the AWS IoT Core Service of the selected Region. Things Thing types Certificates Policy","title":"User Guide"},{"location":"user_guide/#user-guide","text":"","title":"User Guide"},{"location":"user_guide/#installation","text":"The complete project can be found in this repository created by Yilmaz Naci Aslan. For installation please navigate to the github repository or simply download as zip. Once the repository is downloaded follow the guidelines below for depending on your operating system","title":"Installation"},{"location":"user_guide/#ubuntu","text":"cd YOUR_WORKING_DIRECTORY source installation.sh","title":"Ubuntu"},{"location":"user_guide/#windows","text":"Not tested yet","title":"Windows"},{"location":"user_guide/#configuration","text":"Once the installation is completed, some configurations are needed be done. All the configuration parameters are defined in the scrpts/config.py script. Configuration steps can be grouped into following sections AWS IAM Role Application Configuration","title":"Configuration"},{"location":"user_guide/#aws-iam-configuration","text":"The very first thing to configure is the user settings for accesing to AWS IoT Core using boto3. If you don't have AWS account please create one before proceeding the next steps.","title":"AWS IAM Configuration"},{"location":"user_guide/#create-an-iam-user","text":"It is good practice to create an AWS user for your account rather than using the root account. Create a user for your AWS account by enabling both Programmatic access and Console Acces . Save/download the credetion ID and and scret key Add the following policies to the user AWSIoTFullAccess AWSS3FullAccess Save the AWS Access Key Id and Access Key into corrosponding .config file in the operating system. aws_access_key_id = xxxxxxxx aws_secret_access_key = xxxxxxxx For more information about please see the more detailed explanation section.","title":"Create an IAM user"},{"location":"user_guide/#application-configuration-optional","text":"","title":"Application Configuration (Optional)"},{"location":"user_guide/#set-region","text":"Under the application configuration, REGION of the AWS IoT Core Service being used is defined. Default value for te region is REGION = \"us-east-1\" . If you want to run your applicatio in another region then simply change the Region constant in config.py to another location. REGION = \"us-east-1\"","title":"Set Region"},{"location":"user_guide/#set-certification-option","text":"When creating multiple things for to beu the recommand e each thing has a unique certification. This is important for cyber security aspect. However for experimenting purposes one can also use the same certification for multiple things. This behahoiver is determined with the set_unique flag in config.py . By keeping this flag true, a unique certificate will be generated for each thing. Defining this flag to False will generate only one certification in aws iot core, and this certificate will be used for authenticating the created things. Default value of the flag is defined as True. set_unique = True","title":"Set Certification option"},{"location":"user_guide/#set-a-name-for-the-thing-type","text":"","title":"Set a name for the thing type"},{"location":"user_guide/#run","text":"Once the installation and AWS IAM Configuration is completed, you can execute the main.py script. By using the default parameters in Application Configuration , the program will executes as below; Creates a S3 Bucket to be used to store provisioning data file. Creates 10 things, 10 certificates and a policy to test the mqtt connection. Stores the created certificates and keys under secure/keys and secure/certificate directories of the project folder. Attaches created each certificate with a thing and a policy.","title":"Run"},{"location":"user_guide/#results","text":"Once the execution of the main.py finishes, following resources can be found on the AWS IoT Core Service of the selected Region.","title":"Results"},{"location":"user_guide/#things","text":"","title":"Things"},{"location":"user_guide/#thing-types","text":"","title":"Thing types"},{"location":"user_guide/#certificates","text":"","title":"Certificates"},{"location":"user_guide/#policy","text":"","title":"Policy"}]}